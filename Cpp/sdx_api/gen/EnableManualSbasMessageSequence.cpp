
#include "EnableManualSbasMessageSequence.h"

#include "command_factory.h"
#include "parse_json.hpp"

///
/// Definition of EnableManualSbasMessageSequence
///

namespace Sdx
{
  namespace Cmd
  {
    const char* const EnableManualSbasMessageSequence::CmdName = "EnableManualSbasMessageSequence";
    const char* const EnableManualSbasMessageSequence::Documentation = "Enable (or disable) the use of a manually imported SBAS message sequence instead of the automatically generated one.\n"
      "\n"
      "Name    Type Description\n"
      "------- ---- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n"
      "Enabled bool If enabled (true), Skydel will use a manually imported SBAS message sequence as the source. If disabled (false, default), the SBAS message sequence will be automatically generated by Skydel.";
    const char* const EnableManualSbasMessageSequence::TargetId = "";

    REGISTER_COMMAND_TO_FACTORY_DECL(EnableManualSbasMessageSequence);
    REGISTER_COMMAND_TO_FACTORY_IMPL(EnableManualSbasMessageSequence);


    EnableManualSbasMessageSequence::EnableManualSbasMessageSequence()
      : CommandBase(CmdName, TargetId)
    {}

    EnableManualSbasMessageSequence::EnableManualSbasMessageSequence(bool enabled)
      : CommandBase(CmdName, TargetId)
    {

      setEnabled(enabled);
    }

    EnableManualSbasMessageSequencePtr EnableManualSbasMessageSequence::create(bool enabled)
    {
      return std::make_shared<EnableManualSbasMessageSequence>(enabled);
    }

    EnableManualSbasMessageSequencePtr EnableManualSbasMessageSequence::dynamicCast(CommandBasePtr ptr)
    {
      return std::dynamic_pointer_cast<EnableManualSbasMessageSequence>(ptr);
    }

    bool EnableManualSbasMessageSequence::isValid() const
    {
      
        return m_values.IsObject()
          && parse_json<bool>::is_valid(m_values["Enabled"])
        ;

    }

    std::string EnableManualSbasMessageSequence::documentation() const { return Documentation; }

    const std::vector<std::string>& EnableManualSbasMessageSequence::fieldNames() const 
    { 
      static const std::vector<std::string> names {"Enabled"}; 
      return names; 
    }


    int EnableManualSbasMessageSequence::executePermission() const
    {
      return EXECUTE_IF_IDLE;
    }


    bool EnableManualSbasMessageSequence::enabled() const
    {
      return parse_json<bool>::parse(m_values["Enabled"]);
    }

    void EnableManualSbasMessageSequence::setEnabled(bool enabled)
    {
      m_values.AddMember("Enabled", parse_json<bool>::format(enabled, m_values.GetAllocator()), m_values.GetAllocator());
    }


  }
}
