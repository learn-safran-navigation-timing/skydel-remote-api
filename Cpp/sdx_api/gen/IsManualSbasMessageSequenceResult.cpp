
#include "IsManualSbasMessageSequenceResult.h"

#include "command_factory.h"
#include "parse_json.hpp"

///
/// Definition of IsManualSbasMessageSequenceResult
///

namespace Sdx
{
  namespace Cmd
  {
    const char* const IsManualSbasMessageSequenceResult::CmdName = "IsManualSbasMessageSequenceResult";
    const char* const IsManualSbasMessageSequenceResult::Documentation = "Result of IsManualSbasMessageSequence.\n"
      "\n"
      "Name    Type Description\n"
      "------- ---- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n"
      "Enabled bool If enabled (true), Skydel will use a manually imported SBAS message sequence as the source. If disabled (false, default), the SBAS message sequence will be automatically generated by Skydel.";
    const char* const IsManualSbasMessageSequenceResult::TargetId = "";

    REGISTER_COMMAND_TO_FACTORY_IMPL(IsManualSbasMessageSequenceResult);


    IsManualSbasMessageSequenceResult::IsManualSbasMessageSequenceResult()
      : CommandResult(CmdName, TargetId)
    {}

    IsManualSbasMessageSequenceResult::IsManualSbasMessageSequenceResult(bool enabled)
      : CommandResult(CmdName, TargetId)
    {

      setEnabled(enabled);
    }

    IsManualSbasMessageSequenceResult::IsManualSbasMessageSequenceResult(CommandBasePtr relatedCommand, bool enabled)
      : CommandResult(CmdName, TargetId, relatedCommand)
    {

      setEnabled(enabled);
    }


    IsManualSbasMessageSequenceResultPtr IsManualSbasMessageSequenceResult::create(bool enabled)
    {
      return std::make_shared<IsManualSbasMessageSequenceResult>(enabled);
    }

    IsManualSbasMessageSequenceResultPtr IsManualSbasMessageSequenceResult::create(CommandBasePtr relatedCommand, bool enabled)
    {
      return std::make_shared<IsManualSbasMessageSequenceResult>(relatedCommand, enabled);
    }

    IsManualSbasMessageSequenceResultPtr IsManualSbasMessageSequenceResult::dynamicCast(CommandBasePtr ptr)
    {
      return std::dynamic_pointer_cast<IsManualSbasMessageSequenceResult>(ptr);
    }

    bool IsManualSbasMessageSequenceResult::isValid() const
    {
      
        return m_values.IsObject()
          && parse_json<bool>::is_valid(m_values["Enabled"])
        ;

    }

    std::string IsManualSbasMessageSequenceResult::documentation() const { return Documentation; }

    const std::vector<std::string>& IsManualSbasMessageSequenceResult::fieldNames() const 
    { 
      static const std::vector<std::string> names {"Enabled"}; 
      return names; 
    }


    bool IsManualSbasMessageSequenceResult::enabled() const
    {
      return parse_json<bool>::parse(m_values["Enabled"]);
    }

    void IsManualSbasMessageSequenceResult::setEnabled(bool enabled)
    {
      m_values.AddMember("Enabled", parse_json<bool>::format(enabled, m_values.GetAllocator()), m_values.GetAllocator());
    }


  }
}
